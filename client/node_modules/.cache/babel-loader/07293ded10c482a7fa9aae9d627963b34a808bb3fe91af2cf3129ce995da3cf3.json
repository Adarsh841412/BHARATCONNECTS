{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adars\\\\MASTERCSS\\\\quick-chat-app\\\\client\\\\src\\\\pages\\\\home\\\\components\\\\chat.js\",\n  _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createNewMessage, getAllMessages } from \"../../../apiCalls/message\";\nimport { hideLoader, showLoader } from \"../../../redux/loaderSlice\";\nimport toast from \"react-hot-toast\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { clearUnreadMessageCount } from \"../../../apiCalls/chat\";\nimport moment from \"moment\";\nimport store from \"../../../redux/store\";\nimport { setAllChats } from \"../../../redux/usersSlice\";\nimport EmojiPicker from \"emoji-picker-react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatArea({\n  socket\n}) {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    selectedChat,\n    user,\n    allChats\n  } = useSelector(state => state.userReducer);\n  const selectedUser = selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.members.find(u => u._id !== user._id);\n  const [message, setMessage] = useState(\"\");\n  const [allMessages, setAllMessages] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [data, setData] = useState(null);\n  const typingTimeoutRef = useRef(null);\n\n  // ✅ Send message or image\n  const sendMessage = async image => {\n    try {\n      const newMessage = {\n        chatId: selectedChat._id,\n        sender: user._id,\n        text: message,\n        image: image\n      };\n\n      // Emit instantly for real-time experience\n      socket.emit(\"send-message\", {\n        ...newMessage,\n        members: selectedChat.members.map(m => m._id),\n        read: false,\n        createdAt: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n      });\n\n      // Save message to DB\n      const response = await createNewMessage(newMessage);\n      if (response.success) {\n        setMessage(\"\");\n        setShowEmojiPicker(false);\n      }\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  // ✅ Format time for display\n  const formatTime = timestamp => {\n    const now = moment();\n    const diff = now.diff(moment(timestamp), \"days\");\n    if (diff < 1) return `Today ${moment(timestamp).format(\"hh:mm A\")}`;else if (diff === 1) return `Yesterday ${moment(timestamp).format(\"hh:mm A\")}`;else return moment(timestamp).format(\"MMM D, hh:mm A\");\n  };\n\n  // ✅ Get chat messages from DB\n  const getMessages = async () => {\n    try {\n      dispatch(showLoader());\n      const response = await getAllMessages(selectedChat._id);\n      dispatch(hideLoader());\n      if (response.success) {\n        setAllMessages(response.data);\n      }\n    } catch (error) {\n      dispatch(hideLoader());\n      toast.error(error.message);\n    }\n  };\n\n  // ✅ Clear unread messages for the opened chat\n  const clearUnreadMessages = async () => {\n    try {\n      socket.emit(\"clear-unread-messages\", {\n        chatId: selectedChat._id,\n        members: selectedChat.members.map(m => m._id)\n      });\n      const response = await clearUnreadMessageCount(selectedChat._id);\n      if (response.success) {\n        const updatedChats = allChats.map(chat => chat._id === selectedChat._id ? response.data : chat);\n        dispatch(setAllChats(updatedChats));\n      }\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  // ✅ Format full name\n  function formatName(user) {\n    if (!user) return \"\";\n    let fname = user.firstname.at(0).toUpperCase() + user.firstname.slice(1).toLowerCase();\n    let lname = user.lastname.at(0).toUpperCase() + user.lastname.slice(1).toLowerCase();\n    return fname + \" \" + lname;\n  }\n\n  // ✅ Send image as base64\n  const sendImage = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onloadend = async () => {\n      sendMessage(reader.result);\n    };\n  };\n\n  // ✅ Socket listeners setup\n  useEffect(() => {\n    if (!selectedChat) return;\n    getMessages();\n    if (selectedChat !== null && selectedChat !== void 0 && selectedChat.lastMessage && selectedChat.lastMessage.sender !== user._id) {\n      clearUnreadMessages();\n    }\n\n    // receive new message\n    socket.off(\"receive-message\").on(\"receive-message\", message => {\n      const selected = store.getState().userReducer.selectedChat;\n      if (selected._id === message.chatId) {\n        setAllMessages(prevmsg => [...prevmsg, message]);\n      }\n      if (selected._id === message.chatId && message.sender !== user._id) {\n        clearUnreadMessages();\n      }\n    });\n\n    // ✅ unread count increment listener\n    socket.off(\"set-message-count\").on(\"set-message-count\", message => {\n      const allChats = store.getState().userReducer.allChats;\n      const updatedChats = allChats.map(chat => {\n        if (chat._id === message.chatId) {\n          const unread = chat.unreadMessageCount && message.sender !== user._id ? chat.unreadMessageCount + 1 : chat.unreadMessageCount || 1;\n          return {\n            ...chat,\n            unreadMessageCount: unread,\n            lastMessage: message\n          };\n        }\n        return chat;\n      });\n      dispatch(setAllChats(updatedChats));\n    });\n\n    // clear unread\n    socket.off(\"message-count-cleared\").on(\"message-count-cleared\", data => {\n      const selected = store.getState().userReducer.selectedChat;\n      const allChats = store.getState().userReducer.allChats;\n      if (selected._id === data.chatId) {\n        const updatedChats = allChats.map(chat => chat._id === data.chatId ? {\n          ...chat,\n          unreadMessageCount: 0\n        } : chat);\n        dispatch(setAllChats(updatedChats));\n        setAllMessages(prevMsgs => prevMsgs.map(msg => ({\n          ...msg,\n          read: true\n        })));\n      }\n    });\n\n    // typing\n    socket.off(\"started-typing\").on(\"started-typing\", data => {\n      setData(data);\n      if (selectedChat._id === data.chatId && data.sender !== user._id) {\n        setIsTyping(true);\n        clearTimeout(typingTimeoutRef.current);\n        typingTimeoutRef.current = setTimeout(() => {\n          setIsTyping(false);\n        }, 2000);\n      }\n    });\n  }, [selectedChat]);\n\n  // ✅ Auto-scroll chat bottom\n  useEffect(() => {\n    const msgContainer = document.getElementById(\"main-chat-area\");\n    if (msgContainer) msgContainer.scrollTop = msgContainer.scrollHeight;\n  }, [allMessages, isTyping]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-chat-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-chat-area-header\",\n        children: formatName(selectedUser)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-chat-area\",\n        id: \"main-chat-area\",\n        children: [allMessages.map((msg, index) => {\n          const isCurrentUserSender = msg.sender === user._id;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-container\",\n            style: isCurrentUserSender ? {\n              justifyContent: \"end\"\n            } : {\n              justifyContent: \"start\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: isCurrentUserSender ? \"send-message\" : \"received-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: msg.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 23\n                }, this), msg.image && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: msg.image,\n                    alt: \"image\",\n                    height: \"120\",\n                    width: \"120\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-timestamp\",\n                style: isCurrentUserSender ? {\n                  float: \"right\"\n                } : {\n                  float: \"left\"\n                },\n                children: [formatTime(msg.createdAt), \" \", isCurrentUserSender && msg.read && /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-check-circle\",\n                  \"aria-hidden\": \"true\",\n                  style: {\n                    color: \"#e74c3c\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: isTyping && (selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.members.map(m => m._id).includes(data === null || data === void 0 ? void 0 : data.sender)) && /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          display: \"flex\",\n          padding: \"0px 20px\",\n          justifyContent: \"right\"\n        },\n        children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n          style: {\n            width: \"300px\",\n            height: \"400px\"\n          },\n          onEmojiClick: e => setMessage(message + e.emoji)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send-message-div\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"send-message-input\",\n          placeholder: \"Type a message\",\n          value: message,\n          onChange: e => {\n            setMessage(e.target.value);\n            socket.emit(\"user-typing\", {\n              chatId: selectedChat._id,\n              members: selectedChat.members.map(m => m._id),\n              sender: user._id\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-picture-o send-image-btn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"file\",\n            style: {\n              display: \"none\"\n            },\n            accept: \"image/jpg,image/png,image/jpeg,image/gif\",\n            onChange: sendImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fa fa-smile-o send-emoji-btn\",\n          \"aria-hidden\": \"true\",\n          onClick: () => setShowEmojiPicker(!showEmojiPicker)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fa fa-paper-plane send-message-btn\",\n          \"aria-hidden\": \"true\",\n          onClick: () => sendMessage(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(ChatArea, \"tuToCyoBLqLTn/ZrWOsCYejPeBc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = ChatArea;\nexport default ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["useDispatch","useSelector","createNewMessage","getAllMessages","hideLoader","showLoader","toast","useEffect","useRef","useState","clearUnreadMessageCount","moment","store","setAllChats","EmojiPicker","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatArea","socket","_s","dispatch","selectedChat","user","allChats","state","userReducer","selectedUser","members","find","u","_id","message","setMessage","allMessages","setAllMessages","isTyping","setIsTyping","showEmojiPicker","setShowEmojiPicker","data","setData","typingTimeoutRef","sendMessage","image","newMessage","chatId","sender","text","emit","map","m","read","createdAt","format","response","success","error","formatTime","timestamp","now","diff","getMessages","clearUnreadMessages","updatedChats","chat","formatName","fname","firstname","at","toUpperCase","slice","toLowerCase","lname","lastname","sendImage","e","file","target","files","reader","FileReader","readAsDataURL","onloadend","result","lastMessage","off","on","selected","getState","prevmsg","unread","unreadMessageCount","prevMsgs","msg","clearTimeout","current","setTimeout","msgContainer","document","getElementById","scrollTop","scrollHeight","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","index","isCurrentUserSender","style","justifyContent","src","alt","height","width","float","color","includes","display","padding","onEmojiClick","emoji","type","placeholder","value","onChange","htmlFor","accept","onClick","_c","$RefreshReg$"],"sources":["C:/Users/adars/MASTERCSS/quick-chat-app/client/src/pages/home/components/chat.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport { createNewMessage, getAllMessages } from \"../../../apiCalls/message\";\r\nimport { hideLoader, showLoader } from \"../../../redux/loaderSlice\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { clearUnreadMessageCount } from \"../../../apiCalls/chat\";\r\nimport moment from \"moment\";\r\nimport store from \"../../../redux/store\";\r\nimport { setAllChats } from \"../../../redux/usersSlice\";\r\nimport EmojiPicker from \"emoji-picker-react\";\r\n\r\nfunction ChatArea({ socket }) {\r\n  const dispatch = useDispatch();\r\n  const { selectedChat, user, allChats } = useSelector(\r\n    (state) => state.userReducer\r\n  );\r\n  const selectedUser = selectedChat?.members.find((u) => u._id !== user._id);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [allMessages, setAllMessages] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n  const [data, setData] = useState(null);\r\n  const typingTimeoutRef = useRef(null);\r\n\r\n  // ✅ Send message or image\r\n  const sendMessage = async (image) => {\r\n    try {\r\n      const newMessage = {\r\n        chatId: selectedChat._id,\r\n        sender: user._id,\r\n        text: message,\r\n        image: image,\r\n      };\r\n\r\n      // Emit instantly for real-time experience\r\n      socket.emit(\"send-message\", {\r\n        ...newMessage,\r\n        members: selectedChat.members.map((m) => m._id),\r\n        read: false,\r\n        createdAt: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\r\n      });\r\n\r\n      // Save message to DB\r\n      const response = await createNewMessage(newMessage);\r\n      if (response.success) {\r\n        setMessage(\"\");\r\n        setShowEmojiPicker(false);\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n\r\n  // ✅ Format time for display\r\n  const formatTime = (timestamp) => {\r\n    const now = moment();\r\n    const diff = now.diff(moment(timestamp), \"days\");\r\n\r\n    if (diff < 1) return `Today ${moment(timestamp).format(\"hh:mm A\")}`;\r\n    else if (diff === 1)\r\n      return `Yesterday ${moment(timestamp).format(\"hh:mm A\")}`;\r\n    else return moment(timestamp).format(\"MMM D, hh:mm A\");\r\n  };\r\n\r\n  // ✅ Get chat messages from DB\r\n  const getMessages = async () => {\r\n    try {\r\n      dispatch(showLoader());\r\n      const response = await getAllMessages(selectedChat._id);\r\n      dispatch(hideLoader());\r\n      if (response.success) {\r\n        setAllMessages(response.data);\r\n      }\r\n    } catch (error) {\r\n      dispatch(hideLoader());\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n\r\n  // ✅ Clear unread messages for the opened chat\r\n  const clearUnreadMessages = async () => {\r\n    try {\r\n      socket.emit(\"clear-unread-messages\", {\r\n        chatId: selectedChat._id,\r\n        members: selectedChat.members.map((m) => m._id),\r\n      });\r\n\r\n      const response = await clearUnreadMessageCount(selectedChat._id);\r\n      if (response.success) {\r\n        const updatedChats = allChats.map((chat) =>\r\n          chat._id === selectedChat._id ? response.data : chat\r\n        );\r\n        dispatch(setAllChats(updatedChats));\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n\r\n  // ✅ Format full name\r\n  function formatName(user) {\r\n    if (!user) return \"\";\r\n    let fname =\r\n      user.firstname.at(0).toUpperCase() + user.firstname.slice(1).toLowerCase();\r\n    let lname =\r\n      user.lastname.at(0).toUpperCase() + user.lastname.slice(1).toLowerCase();\r\n    return fname + \" \" + lname;\r\n  }\r\n\r\n  // ✅ Send image as base64\r\n  const sendImage = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onloadend = async () => {\r\n      sendMessage(reader.result);\r\n    };\r\n  };\r\n\r\n  // ✅ Socket listeners setup\r\n  useEffect(() => {\r\n    if (!selectedChat) return;\r\n\r\n    getMessages();\r\n    if (selectedChat?.lastMessage && selectedChat.lastMessage.sender !== user._id) {\r\n      clearUnreadMessages();\r\n    }\r\n\r\n    // receive new message\r\n    socket.off(\"receive-message\").on(\"receive-message\", (message) => {\r\n      const selected = store.getState().userReducer.selectedChat;\r\n      if (selected._id === message.chatId) {\r\n        setAllMessages((prevmsg) => [...prevmsg, message]);\r\n      }\r\n      if (selected._id === message.chatId && message.sender !== user._id) {\r\n        clearUnreadMessages();\r\n      }\r\n    });\r\n\r\n    // ✅ unread count increment listener\r\n    socket.off(\"set-message-count\").on(\"set-message-count\", (message) => {\r\n      const allChats = store.getState().userReducer.allChats;\r\n      const updatedChats = allChats.map((chat) => {\r\n        if (chat._id === message.chatId) {\r\n          const unread =\r\n            chat.unreadMessageCount && message.sender !== user._id\r\n              ? chat.unreadMessageCount + 1\r\n              : chat.unreadMessageCount || 1;\r\n          return { ...chat, unreadMessageCount: unread, lastMessage: message };\r\n        }\r\n        return chat;\r\n      });\r\n      dispatch(setAllChats(updatedChats));\r\n    });\r\n\r\n    // clear unread\r\n    socket.off(\"message-count-cleared\").on(\"message-count-cleared\", (data) => {\r\n      const selected = store.getState().userReducer.selectedChat;\r\n      const allChats = store.getState().userReducer.allChats;\r\n\r\n      if (selected._id === data.chatId) {\r\n        const updatedChats = allChats.map((chat) =>\r\n          chat._id === data.chatId\r\n            ? { ...chat, unreadMessageCount: 0 }\r\n            : chat\r\n        );\r\n        dispatch(setAllChats(updatedChats));\r\n\r\n        setAllMessages((prevMsgs) =>\r\n          prevMsgs.map((msg) => ({ ...msg, read: true }))\r\n        );\r\n      }\r\n    });\r\n\r\n    // typing\r\n    socket.off(\"started-typing\").on(\"started-typing\", (data) => {\r\n      setData(data);\r\n      if (selectedChat._id === data.chatId && data.sender !== user._id) {\r\n        setIsTyping(true);\r\n        clearTimeout(typingTimeoutRef.current);\r\n        typingTimeoutRef.current = setTimeout(() => {\r\n          setIsTyping(false);\r\n        }, 2000);\r\n      }\r\n    });\r\n  }, [selectedChat]);\r\n\r\n  // ✅ Auto-scroll chat bottom\r\n  useEffect(() => {\r\n    const msgContainer = document.getElementById(\"main-chat-area\");\r\n    if (msgContainer) msgContainer.scrollTop = msgContainer.scrollHeight;\r\n  }, [allMessages, isTyping]);\r\n\r\n  return (\r\n    <>\r\n      {selectedChat && (\r\n        <div className=\"app-chat-area\">\r\n          <div className=\"app-chat-area-header\">\r\n            {formatName(selectedUser)}\r\n          </div>\r\n\r\n          <div className=\"main-chat-area\" id=\"main-chat-area\">\r\n            {allMessages.map((msg, index) => {\r\n              const isCurrentUserSender = msg.sender === user._id;\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className=\"message-container\"\r\n                  style={\r\n                    isCurrentUserSender\r\n                      ? { justifyContent: \"end\" }\r\n                      : { justifyContent: \"start\" }\r\n                  }\r\n                >\r\n                  <div>\r\n                    <div\r\n                      className={\r\n                        isCurrentUserSender ? \"send-message\" : \"received-message\"\r\n                      }\r\n                    >\r\n                      <div>{msg.text}</div>\r\n                      {msg.image && (\r\n                        <div>\r\n                          <img\r\n                            src={msg.image}\r\n                            alt=\"image\"\r\n                            height=\"120\"\r\n                            width=\"120\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    <div\r\n                      className=\"message-timestamp\"\r\n                      style={\r\n                        isCurrentUserSender\r\n                          ? { float: \"right\" }\r\n                          : { float: \"left\" }\r\n                      }\r\n                    >\r\n                      {formatTime(msg.createdAt)}{\" \"}\r\n                      {isCurrentUserSender && msg.read && (\r\n                        <i\r\n                          className=\"fa fa-check-circle\"\r\n                          aria-hidden=\"true\"\r\n                          style={{ color: \"#e74c3c\" }}\r\n                        ></i>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            <div className=\"typing-indicator\">\r\n              {isTyping &&\r\n                selectedChat?.members\r\n                  .map((m) => m._id)\r\n                  .includes(data?.sender) && <i>typing...</i>}\r\n            </div>\r\n          </div>\r\n\r\n          {showEmojiPicker && (\r\n            <div\r\n              style={{\r\n                width: \"100%\",\r\n                display: \"flex\",\r\n                padding: \"0px 20px\",\r\n                justifyContent: \"right\",\r\n              }}\r\n            >\r\n              <EmojiPicker\r\n                style={{ width: \"300px\", height: \"400px\" }}\r\n                onEmojiClick={(e) => setMessage(message + e.emoji)}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"send-message-div\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"send-message-input\"\r\n              placeholder=\"Type a message\"\r\n              value={message}\r\n              onChange={(e) => {\r\n                setMessage(e.target.value);\r\n                socket.emit(\"user-typing\", {\r\n                  chatId: selectedChat._id,\r\n                  members: selectedChat.members.map((m) => m._id),\r\n                  sender: user._id,\r\n                });\r\n              }}\r\n            />\r\n\r\n            <label htmlFor=\"file\">\r\n              <i className=\"fa fa-picture-o send-image-btn\"></i>\r\n              <input\r\n                type=\"file\"\r\n                id=\"file\"\r\n                style={{ display: \"none\" }}\r\n                accept=\"image/jpg,image/png,image/jpeg,image/gif\"\r\n                onChange={sendImage}\r\n              />\r\n            </label>\r\n\r\n            <button\r\n              className=\"fa fa-smile-o send-emoji-btn\"\r\n              aria-hidden=\"true\"\r\n              onClick={() => setShowEmojiPicker(!showEmojiPicker)}\r\n            ></button>\r\n            <button\r\n              className=\"fa fa-paper-plane send-message-btn\"\r\n              aria-hidden=\"true\"\r\n              onClick={() => sendMessage(\"\")}\r\n            ></button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChatArea;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}