{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adars\\\\MASTERCSS\\\\quick-chat-app\\\\client\\\\src\\\\pages\\\\home\\\\components\\\\chat.js\",\n  _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createNewMessage, getAllMessages } from \"../../../apiCalls/message\";\nimport { hideLoader, showLoader } from \"../../../redux/loaderSlice\";\nimport toast from \"react-hot-toast\";\nimport { useEffect, useState } from \"react\";\nimport { clearUnreadMessageCount } from \"./../../../apiCalls/chat\";\nimport moment from \"moment\";\nimport store from \"./../../../redux/store\";\nimport { setAllChats } from \"../../../redux/usersSlice\";\nimport EmojiPicker from \"emoji-picker-react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatArea({\n  socket\n}) {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    selectedChat,\n    user,\n    allChats\n  } = useSelector(state => state.userReducer);\n  const selectedUser = selectedChat.members.find(u => u._id !== user._id);\n  const [message, setMessage] = useState(\"\");\n  const [allMessages, setAllMessages] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [typingData, setTypingData] = useState(null);\n\n  // ✅ Unified send message (handles both text + image)\n  const sendMessage = async image => {\n    if (!message.trim() && !image) return;\n    try {\n      const newMessage = {\n        chatId: selectedChat._id,\n        sender: user._id,\n        text: message || \"\",\n        image: image || \"\"\n      };\n\n      // 1️⃣ Save message in DB first\n      const response = await createNewMessage(newMessage);\n      if (response.success) {\n        const savedMessage = response.data;\n\n        // 2️⃣ Emit real saved message (DB-confirmed)\n        socket.emit(\"send-message\", {\n          ...savedMessage,\n          members: selectedChat.members.map(m => m._id)\n        });\n\n        // 3️⃣ Update UI instantly\n        setAllMessages(prev => [...prev, savedMessage]);\n        setMessage(\"\");\n        setShowEmojiPicker(false);\n      } else {\n        toast.error(response.message);\n      }\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  // ✅ Send Image Handler\n  const sendImage = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onloadend = async () => {\n      await sendMessage(reader.result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // ✅ Fetch previous messages\n  const getMessages = async () => {\n    try {\n      dispatch(showLoader());\n      const response = await getAllMessages(selectedChat._id);\n      dispatch(hideLoader());\n      if (response.success) {\n        setAllMessages(response.data);\n      }\n    } catch (error) {\n      dispatch(hideLoader());\n      toast.error(error.message);\n    }\n  };\n\n  // ✅ Clear unread messages\n  const clearUnreadMessages = async () => {\n    try {\n      socket.emit(\"clear-unread-messages\", {\n        chatId: selectedChat._id,\n        members: selectedChat.members.map(m => m._id)\n      });\n      const response = await clearUnreadMessageCount(selectedChat._id);\n      if (response.success) {\n        const updatedChats = allChats.map(chat => chat._id === selectedChat._id ? response.data : chat);\n        dispatch(setAllChats(updatedChats));\n      }\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  // ✅ Format helpers\n  const formatName = user => {\n    let fname = user.firstname.charAt(0).toUpperCase() + user.firstname.slice(1).toLowerCase();\n    let lname = user.lastname.charAt(0).toUpperCase() + user.lastname.slice(1).toLowerCase();\n    return fname + \" \" + lname;\n  };\n  const formatTime = timestamp => {\n    const now = moment();\n    const diff = now.diff(moment(timestamp), \"days\");\n    if (diff < 1) {\n      return `Today ${moment(timestamp).format(\"hh:mm A\")}`;\n    } else if (diff === 1) {\n      return `Yesterday ${moment(timestamp).format(\"hh:mm A\")}`;\n    } else {\n      return moment(timestamp).format(\"MMM D, hh:mm A\");\n    }\n  };\n\n  // ✅ Socket Listeners\n  useEffect(() => {\n    var _selectedChat$lastMes;\n    getMessages();\n    if ((selectedChat === null || selectedChat === void 0 ? void 0 : (_selectedChat$lastMes = selectedChat.lastMessage) === null || _selectedChat$lastMes === void 0 ? void 0 : _selectedChat$lastMes.sender) !== user._id) {\n      clearUnreadMessages();\n    }\n    socket.off(\"receive-message\").on(\"receive-message\", message => {\n      const currentChat = store.getState().userReducer.selectedChat;\n      if (currentChat._id === message.chatId) {\n        setAllMessages(prev => [...prev, message]);\n      }\n      if (currentChat._id === message.chatId && message.sender !== user._id) {\n        clearUnreadMessages();\n      }\n    });\n    socket.on(\"message-count-cleared\", data => {\n      const currentChat = store.getState().userReducer.selectedChat;\n      const allChats = store.getState().userReducer.allChats;\n      if (currentChat._id === data.chatId) {\n        const updatedChats = allChats.map(chat => {\n          if (chat._id === data.chatId) {\n            return {\n              ...chat,\n              unreadMessageCount: 0\n            };\n          }\n          return chat;\n        });\n        dispatch(setAllChats(updatedChats));\n        setAllMessages(prev => prev.map(msg => ({\n          ...msg,\n          read: true\n        })));\n      }\n    });\n    socket.on(\"started-typing\", data => {\n      setTypingData(data);\n      if (selectedChat._id === data.chatId && data.sender !== user._id) {\n        setIsTyping(true);\n        setTimeout(() => setIsTyping(false), 2000);\n      }\n    });\n  }, [selectedChat]);\n\n  // ✅ Auto-scroll to bottom\n  useEffect(() => {\n    const msgContainer = document.getElementById(\"main-chat-area\");\n    if (msgContainer) msgContainer.scrollTop = msgContainer.scrollHeight;\n  }, [allMessages, isTyping]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-chat-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-chat-area-header\",\n        children: formatName(selectedUser)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-chat-area\",\n        id: \"main-chat-area\",\n        children: [allMessages.map((msg, idx) => {\n          const isCurrentUserSender = msg.sender === user._id;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-container\",\n            style: {\n              justifyContent: isCurrentUserSender ? \"end\" : \"start\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: isCurrentUserSender ? \"send-message\" : \"received-message\",\n                children: [msg.text && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: msg.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 36\n                }, this), msg.image && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: msg.image,\n                  alt: \"attachment\",\n                  height: \"120\",\n                  width: \"120\",\n                  style: {\n                    borderRadius: \"8px\",\n                    marginTop: \"5px\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-timestamp\",\n                style: {\n                  float: isCurrentUserSender ? \"right\" : \"left\"\n                },\n                children: [formatTime(msg.createdAt), \" \", isCurrentUserSender && msg.read && /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-check-circle\",\n                  \"aria-hidden\": \"true\",\n                  style: {\n                    color: \"#e74c3c\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this);\n        }), isTyping && (selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.members.map(m => m._id).includes(typingData === null || typingData === void 0 ? void 0 : typingData.sender)) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          display: \"flex\",\n          padding: \"0px 20px\",\n          justifyContent: \"right\"\n        },\n        children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n          style: {\n            width: \"300px\",\n            height: \"400px\"\n          },\n          onEmojiClick: e => setMessage(message + e.emoji)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send-message-div\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"send-message-input\",\n          placeholder: \"Type a message\",\n          value: message,\n          onChange: e => {\n            setMessage(e.target.value);\n            socket.emit(\"user-typing\", {\n              chatId: selectedChat._id,\n              members: selectedChat.members.map(m => m._id),\n              sender: user._id\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-picture-o send-image-btn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"file\",\n            style: {\n              display: \"none\"\n            },\n            accept: \"image/jpg,image/png,image/jpeg,image/gif\",\n            onChange: sendImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fa fa-smile-o send-emoji-btn\",\n          \"aria-hidden\": \"true\",\n          onClick: () => setShowEmojiPicker(!showEmojiPicker)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fa fa-paper-plane send-message-btn\",\n          \"aria-hidden\": \"true\",\n          onClick: () => sendMessage(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(ChatArea, \"K5Ly4qCkwK6g+pVDhU3DVIMqbOk=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = ChatArea;\nexport default ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["useDispatch","useSelector","createNewMessage","getAllMessages","hideLoader","showLoader","toast","useEffect","useState","clearUnreadMessageCount","moment","store","setAllChats","EmojiPicker","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatArea","socket","_s","dispatch","selectedChat","user","allChats","state","userReducer","selectedUser","members","find","u","_id","message","setMessage","allMessages","setAllMessages","isTyping","setIsTyping","showEmojiPicker","setShowEmojiPicker","typingData","setTypingData","sendMessage","image","trim","newMessage","chatId","sender","text","response","success","savedMessage","data","emit","map","m","prev","error","sendImage","e","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","getMessages","clearUnreadMessages","updatedChats","chat","formatName","fname","firstname","charAt","toUpperCase","slice","toLowerCase","lname","lastname","formatTime","timestamp","now","diff","format","_selectedChat$lastMes","lastMessage","off","on","currentChat","getState","unreadMessageCount","msg","read","setTimeout","msgContainer","document","getElementById","scrollTop","scrollHeight","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","idx","isCurrentUserSender","style","justifyContent","src","alt","height","width","borderRadius","marginTop","float","createdAt","color","includes","display","padding","onEmojiClick","emoji","type","placeholder","value","onChange","htmlFor","accept","onClick","_c","$RefreshReg$"],"sources":["C:/Users/adars/MASTERCSS/quick-chat-app/client/src/pages/home/components/chat.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport { createNewMessage, getAllMessages } from \"../../../apiCalls/message\";\r\nimport { hideLoader, showLoader } from \"../../../redux/loaderSlice\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { clearUnreadMessageCount } from \"./../../../apiCalls/chat\";\r\nimport moment from \"moment\";\r\nimport store from \"./../../../redux/store\";\r\nimport { setAllChats } from \"../../../redux/usersSlice\";\r\nimport EmojiPicker from \"emoji-picker-react\";\r\n\r\nfunction ChatArea({ socket }) {\r\n  const dispatch = useDispatch();\r\n  const { selectedChat, user, allChats } = useSelector(\r\n    (state) => state.userReducer\r\n  );\r\n  const selectedUser = selectedChat.members.find((u) => u._id !== user._id);\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n  const [allMessages, setAllMessages] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n  const [typingData, setTypingData] = useState(null);\r\n\r\n  // ✅ Unified send message (handles both text + image)\r\n  const sendMessage = async (image) => {\r\n    if (!message.trim() && !image) return;\r\n\r\n    try {\r\n      const newMessage = {\r\n        chatId: selectedChat._id,\r\n        sender: user._id,\r\n        text: message || \"\",\r\n        image: image || \"\",\r\n      };\r\n\r\n      // 1️⃣ Save message in DB first\r\n      const response = await createNewMessage(newMessage);\r\n\r\n      if (response.success) {\r\n        const savedMessage = response.data;\r\n\r\n        // 2️⃣ Emit real saved message (DB-confirmed)\r\n        socket.emit(\"send-message\", {\r\n          ...savedMessage,\r\n          members: selectedChat.members.map((m) => m._id),\r\n        });\r\n\r\n        // 3️⃣ Update UI instantly\r\n        setAllMessages((prev) => [...prev, savedMessage]);\r\n        setMessage(\"\");\r\n        setShowEmojiPicker(false);\r\n      } else {\r\n        toast.error(response.message);\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n\r\n  // ✅ Send Image Handler\r\n  const sendImage = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n\r\n    const reader = new FileReader();\r\n    reader.onloadend = async () => {\r\n      await sendMessage(reader.result);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  // ✅ Fetch previous messages\r\n  const getMessages = async () => {\r\n    try {\r\n      dispatch(showLoader());\r\n      const response = await getAllMessages(selectedChat._id);\r\n      dispatch(hideLoader());\r\n\r\n      if (response.success) {\r\n        setAllMessages(response.data);\r\n      }\r\n    } catch (error) {\r\n      dispatch(hideLoader());\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n\r\n  // ✅ Clear unread messages\r\n  const clearUnreadMessages = async () => {\r\n    try {\r\n      socket.emit(\"clear-unread-messages\", {\r\n        chatId: selectedChat._id,\r\n        members: selectedChat.members.map((m) => m._id),\r\n      });\r\n\r\n      const response = await clearUnreadMessageCount(selectedChat._id);\r\n      if (response.success) {\r\n        const updatedChats = allChats.map((chat) =>\r\n          chat._id === selectedChat._id ? response.data : chat\r\n        );\r\n        dispatch(setAllChats(updatedChats));\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message);\r\n    }\r\n  };\r\n\r\n  // ✅ Format helpers\r\n  const formatName = (user) => {\r\n    let fname =\r\n      user.firstname.charAt(0).toUpperCase() +\r\n      user.firstname.slice(1).toLowerCase();\r\n    let lname =\r\n      user.lastname.charAt(0).toUpperCase() +\r\n      user.lastname.slice(1).toLowerCase();\r\n    return fname + \" \" + lname;\r\n  };\r\n\r\n  const formatTime = (timestamp) => {\r\n    const now = moment();\r\n    const diff = now.diff(moment(timestamp), \"days\");\r\n\r\n    if (diff < 1) {\r\n      return `Today ${moment(timestamp).format(\"hh:mm A\")}`;\r\n    } else if (diff === 1) {\r\n      return `Yesterday ${moment(timestamp).format(\"hh:mm A\")}`;\r\n    } else {\r\n      return moment(timestamp).format(\"MMM D, hh:mm A\");\r\n    }\r\n  };\r\n\r\n  // ✅ Socket Listeners\r\n  useEffect(() => {\r\n    getMessages();\r\n\r\n    if (selectedChat?.lastMessage?.sender !== user._id) {\r\n      clearUnreadMessages();\r\n    }\r\n\r\n    socket.off(\"receive-message\").on(\"receive-message\", (message) => {\r\n      const currentChat = store.getState().userReducer.selectedChat;\r\n      if (currentChat._id === message.chatId) {\r\n        setAllMessages((prev) => [...prev, message]);\r\n      }\r\n\r\n      if (\r\n        currentChat._id === message.chatId &&\r\n        message.sender !== user._id\r\n      ) {\r\n        clearUnreadMessages();\r\n      }\r\n    });\r\n\r\n    socket.on(\"message-count-cleared\", (data) => {\r\n      const currentChat = store.getState().userReducer.selectedChat;\r\n      const allChats = store.getState().userReducer.allChats;\r\n\r\n      if (currentChat._id === data.chatId) {\r\n        const updatedChats = allChats.map((chat) => {\r\n          if (chat._id === data.chatId) {\r\n            return { ...chat, unreadMessageCount: 0 };\r\n          }\r\n          return chat;\r\n        });\r\n        dispatch(setAllChats(updatedChats));\r\n\r\n        setAllMessages((prev) =>\r\n          prev.map((msg) => ({ ...msg, read: true }))\r\n        );\r\n      }\r\n    });\r\n\r\n    socket.on(\"started-typing\", (data) => {\r\n      setTypingData(data);\r\n      if (\r\n        selectedChat._id === data.chatId &&\r\n        data.sender !== user._id\r\n      ) {\r\n        setIsTyping(true);\r\n        setTimeout(() => setIsTyping(false), 2000);\r\n      }\r\n    });\r\n  }, [selectedChat]);\r\n\r\n  // ✅ Auto-scroll to bottom\r\n  useEffect(() => {\r\n    const msgContainer = document.getElementById(\"main-chat-area\");\r\n    if (msgContainer) msgContainer.scrollTop = msgContainer.scrollHeight;\r\n  }, [allMessages, isTyping]);\r\n\r\n  return (\r\n    <>\r\n      {selectedChat && (\r\n        <div className=\"app-chat-area\">\r\n          <div className=\"app-chat-area-header\">\r\n            {formatName(selectedUser)}\r\n          </div>\r\n\r\n          <div className=\"main-chat-area\" id=\"main-chat-area\">\r\n            {allMessages.map((msg, idx) => {\r\n              const isCurrentUserSender = msg.sender === user._id;\r\n\r\n              return (\r\n                <div\r\n                  key={idx}\r\n                  className=\"message-container\"\r\n                  style={{\r\n                    justifyContent: isCurrentUserSender ? \"end\" : \"start\",\r\n                  }}\r\n                >\r\n                  <div>\r\n                    <div\r\n                      className={\r\n                        isCurrentUserSender\r\n                          ? \"send-message\"\r\n                          : \"received-message\"\r\n                      }\r\n                    >\r\n                      {msg.text && <div>{msg.text}</div>}\r\n                      {msg.image && (\r\n                        <img\r\n                          src={msg.image}\r\n                          alt=\"attachment\"\r\n                          height=\"120\"\r\n                          width=\"120\"\r\n                          style={{ borderRadius: \"8px\", marginTop: \"5px\" }}\r\n                        />\r\n                      )}\r\n                    </div>\r\n\r\n                    <div\r\n                      className=\"message-timestamp\"\r\n                      style={{\r\n                        float: isCurrentUserSender ? \"right\" : \"left\",\r\n                      }}\r\n                    >\r\n                      {formatTime(msg.createdAt)}{\" \"}\r\n                      {isCurrentUserSender && msg.read && (\r\n                        <i\r\n                          className=\"fa fa-check-circle\"\r\n                          aria-hidden=\"true\"\r\n                          style={{ color: \"#e74c3c\" }}\r\n                        ></i>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            {isTyping &&\r\n              selectedChat?.members\r\n                .map((m) => m._id)\r\n                .includes(typingData?.sender) && (\r\n                <div className=\"typing-indicator\">\r\n                  <i>typing...</i>\r\n                </div>\r\n              )}\r\n          </div>\r\n\r\n          {showEmojiPicker && (\r\n            <div\r\n              style={{\r\n                width: \"100%\",\r\n                display: \"flex\",\r\n                padding: \"0px 20px\",\r\n                justifyContent: \"right\",\r\n              }}\r\n            >\r\n              <EmojiPicker\r\n                style={{ width: \"300px\", height: \"400px\" }}\r\n                onEmojiClick={(e) => setMessage(message + e.emoji)}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"send-message-div\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"send-message-input\"\r\n              placeholder=\"Type a message\"\r\n              value={message}\r\n              onChange={(e) => {\r\n                setMessage(e.target.value);\r\n                socket.emit(\"user-typing\", {\r\n                  chatId: selectedChat._id,\r\n                  members: selectedChat.members.map((m) => m._id),\r\n                  sender: user._id,\r\n                });\r\n              }}\r\n            />\r\n\r\n            <label htmlFor=\"file\">\r\n              <i className=\"fa fa-picture-o send-image-btn\"></i>\r\n              <input\r\n                type=\"file\"\r\n                id=\"file\"\r\n                style={{ display: \"none\" }}\r\n                accept=\"image/jpg,image/png,image/jpeg,image/gif\"\r\n                onChange={sendImage}\r\n              />\r\n            </label>\r\n\r\n            <button\r\n              className=\"fa fa-smile-o send-emoji-btn\"\r\n              aria-hidden=\"true\"\r\n              onClick={() => setShowEmojiPicker(!showEmojiPicker)}\r\n            ></button>\r\n\r\n            <button\r\n              className=\"fa fa-paper-plane send-message-btn\"\r\n              aria-hidden=\"true\"\r\n              onClick={() => sendMessage(\"\")}\r\n            ></button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChatArea;\r\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,gBAAgB,EAAEC,cAAc,QAAQ,2BAA2B;AAC5E,SAASC,UAAU,EAAEC,UAAU,QAAQ,4BAA4B;AACnE,OAAOC,KAAK,MAAM,iBAAiB;AACnC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,uBAAuB,QAAQ,0BAA0B;AAClE,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,SAASC,WAAW,QAAQ,2BAA2B;AACvD,OAAOC,WAAW,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,SAASC,QAAQA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC5B,MAAMC,QAAQ,GAAGrB,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEsB,YAAY;IAAEC,IAAI;IAAEC;EAAS,CAAC,GAAGvB,WAAW,CACjDwB,KAAK,IAAKA,KAAK,CAACC,WACnB,CAAC;EACD,MAAMC,YAAY,GAAGL,YAAY,CAACM,OAAO,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKR,IAAI,CAACQ,GAAG,CAAC;EAEzE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC0B,WAAW,EAAEC,cAAc,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC4B,QAAQ,EAAEC,WAAW,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC8B,eAAe,EAAEC,kBAAkB,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACgC,UAAU,EAAEC,aAAa,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;;EAElD;EACA,MAAMkC,WAAW,GAAG,MAAOC,KAAK,IAAK;IACnC,IAAI,CAACX,OAAO,CAACY,IAAI,CAAC,CAAC,IAAI,CAACD,KAAK,EAAE;IAE/B,IAAI;MACF,MAAME,UAAU,GAAG;QACjBC,MAAM,EAAExB,YAAY,CAACS,GAAG;QACxBgB,MAAM,EAAExB,IAAI,CAACQ,GAAG;QAChBiB,IAAI,EAAEhB,OAAO,IAAI,EAAE;QACnBW,KAAK,EAAEA,KAAK,IAAI;MAClB,CAAC;;MAED;MACA,MAAMM,QAAQ,GAAG,MAAM/C,gBAAgB,CAAC2C,UAAU,CAAC;MAEnD,IAAII,QAAQ,CAACC,OAAO,EAAE;QACpB,MAAMC,YAAY,GAAGF,QAAQ,CAACG,IAAI;;QAElC;QACAjC,MAAM,CAACkC,IAAI,CAAC,cAAc,EAAE;UAC1B,GAAGF,YAAY;UACfvB,OAAO,EAAEN,YAAY,CAACM,OAAO,CAAC0B,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACxB,GAAG;QAChD,CAAC,CAAC;;QAEF;QACAI,cAAc,CAAEqB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEL,YAAY,CAAC,CAAC;QACjDlB,UAAU,CAAC,EAAE,CAAC;QACdM,kBAAkB,CAAC,KAAK,CAAC;MAC3B,CAAC,MAAM;QACLjC,KAAK,CAACmD,KAAK,CAACR,QAAQ,CAACjB,OAAO,CAAC;MAC/B;IACF,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACdnD,KAAK,CAACmD,KAAK,CAACA,KAAK,CAACzB,OAAO,CAAC;IAC5B;EACF,CAAC;;EAED;EACA,MAAM0B,SAAS,GAAG,MAAOC,CAAC,IAAK;IAC7B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACF,IAAI,EAAE;IAEX,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,SAAS,GAAG,YAAY;MAC7B,MAAMvB,WAAW,CAACqB,MAAM,CAACG,MAAM,CAAC;IAClC,CAAC;IACDH,MAAM,CAACI,aAAa,CAACP,IAAI,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF/C,QAAQ,CAAChB,UAAU,CAAC,CAAC,CAAC;MACtB,MAAM4C,QAAQ,GAAG,MAAM9C,cAAc,CAACmB,YAAY,CAACS,GAAG,CAAC;MACvDV,QAAQ,CAACjB,UAAU,CAAC,CAAC,CAAC;MAEtB,IAAI6C,QAAQ,CAACC,OAAO,EAAE;QACpBf,cAAc,CAACc,QAAQ,CAACG,IAAI,CAAC;MAC/B;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdpC,QAAQ,CAACjB,UAAU,CAAC,CAAC,CAAC;MACtBE,KAAK,CAACmD,KAAK,CAACA,KAAK,CAACzB,OAAO,CAAC;IAC5B;EACF,CAAC;;EAED;EACA,MAAMqC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACFlD,MAAM,CAACkC,IAAI,CAAC,uBAAuB,EAAE;QACnCP,MAAM,EAAExB,YAAY,CAACS,GAAG;QACxBH,OAAO,EAAEN,YAAY,CAACM,OAAO,CAAC0B,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACxB,GAAG;MAChD,CAAC,CAAC;MAEF,MAAMkB,QAAQ,GAAG,MAAMxC,uBAAuB,CAACa,YAAY,CAACS,GAAG,CAAC;MAChE,IAAIkB,QAAQ,CAACC,OAAO,EAAE;QACpB,MAAMoB,YAAY,GAAG9C,QAAQ,CAAC8B,GAAG,CAAEiB,IAAI,IACrCA,IAAI,CAACxC,GAAG,KAAKT,YAAY,CAACS,GAAG,GAAGkB,QAAQ,CAACG,IAAI,GAAGmB,IAClD,CAAC;QACDlD,QAAQ,CAACT,WAAW,CAAC0D,YAAY,CAAC,CAAC;MACrC;IACF,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdnD,KAAK,CAACmD,KAAK,CAACA,KAAK,CAACzB,OAAO,CAAC;IAC5B;EACF,CAAC;;EAED;EACA,MAAMwC,UAAU,GAAIjD,IAAI,IAAK;IAC3B,IAAIkD,KAAK,GACPlD,IAAI,CAACmD,SAAS,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GACtCrD,IAAI,CAACmD,SAAS,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACvC,IAAIC,KAAK,GACPxD,IAAI,CAACyD,QAAQ,CAACL,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GACrCrD,IAAI,CAACyD,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACtC,OAAOL,KAAK,GAAG,GAAG,GAAGM,KAAK;EAC5B,CAAC;EAED,MAAME,UAAU,GAAIC,SAAS,IAAK;IAChC,MAAMC,GAAG,GAAGzE,MAAM,CAAC,CAAC;IACpB,MAAM0E,IAAI,GAAGD,GAAG,CAACC,IAAI,CAAC1E,MAAM,CAACwE,SAAS,CAAC,EAAE,MAAM,CAAC;IAEhD,IAAIE,IAAI,GAAG,CAAC,EAAE;MACZ,OAAO,SAAS1E,MAAM,CAACwE,SAAS,CAAC,CAACG,MAAM,CAAC,SAAS,CAAC,EAAE;IACvD,CAAC,MAAM,IAAID,IAAI,KAAK,CAAC,EAAE;MACrB,OAAO,aAAa1E,MAAM,CAACwE,SAAS,CAAC,CAACG,MAAM,CAAC,SAAS,CAAC,EAAE;IAC3D,CAAC,MAAM;MACL,OAAO3E,MAAM,CAACwE,SAAS,CAAC,CAACG,MAAM,CAAC,gBAAgB,CAAC;IACnD;EACF,CAAC;;EAED;EACA9E,SAAS,CAAC,MAAM;IAAA,IAAA+E,qBAAA;IACdlB,WAAW,CAAC,CAAC;IAEb,IAAI,CAAA9C,YAAY,aAAZA,YAAY,wBAAAgE,qBAAA,GAAZhE,YAAY,CAAEiE,WAAW,cAAAD,qBAAA,uBAAzBA,qBAAA,CAA2BvC,MAAM,MAAKxB,IAAI,CAACQ,GAAG,EAAE;MAClDsC,mBAAmB,CAAC,CAAC;IACvB;IAEAlD,MAAM,CAACqE,GAAG,CAAC,iBAAiB,CAAC,CAACC,EAAE,CAAC,iBAAiB,EAAGzD,OAAO,IAAK;MAC/D,MAAM0D,WAAW,GAAG/E,KAAK,CAACgF,QAAQ,CAAC,CAAC,CAACjE,WAAW,CAACJ,YAAY;MAC7D,IAAIoE,WAAW,CAAC3D,GAAG,KAAKC,OAAO,CAACc,MAAM,EAAE;QACtCX,cAAc,CAAEqB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAExB,OAAO,CAAC,CAAC;MAC9C;MAEA,IACE0D,WAAW,CAAC3D,GAAG,KAAKC,OAAO,CAACc,MAAM,IAClCd,OAAO,CAACe,MAAM,KAAKxB,IAAI,CAACQ,GAAG,EAC3B;QACAsC,mBAAmB,CAAC,CAAC;MACvB;IACF,CAAC,CAAC;IAEFlD,MAAM,CAACsE,EAAE,CAAC,uBAAuB,EAAGrC,IAAI,IAAK;MAC3C,MAAMsC,WAAW,GAAG/E,KAAK,CAACgF,QAAQ,CAAC,CAAC,CAACjE,WAAW,CAACJ,YAAY;MAC7D,MAAME,QAAQ,GAAGb,KAAK,CAACgF,QAAQ,CAAC,CAAC,CAACjE,WAAW,CAACF,QAAQ;MAEtD,IAAIkE,WAAW,CAAC3D,GAAG,KAAKqB,IAAI,CAACN,MAAM,EAAE;QACnC,MAAMwB,YAAY,GAAG9C,QAAQ,CAAC8B,GAAG,CAAEiB,IAAI,IAAK;UAC1C,IAAIA,IAAI,CAACxC,GAAG,KAAKqB,IAAI,CAACN,MAAM,EAAE;YAC5B,OAAO;cAAE,GAAGyB,IAAI;cAAEqB,kBAAkB,EAAE;YAAE,CAAC;UAC3C;UACA,OAAOrB,IAAI;QACb,CAAC,CAAC;QACFlD,QAAQ,CAACT,WAAW,CAAC0D,YAAY,CAAC,CAAC;QAEnCnC,cAAc,CAAEqB,IAAI,IAClBA,IAAI,CAACF,GAAG,CAAEuC,GAAG,KAAM;UAAE,GAAGA,GAAG;UAAEC,IAAI,EAAE;QAAK,CAAC,CAAC,CAC5C,CAAC;MACH;IACF,CAAC,CAAC;IAEF3E,MAAM,CAACsE,EAAE,CAAC,gBAAgB,EAAGrC,IAAI,IAAK;MACpCX,aAAa,CAACW,IAAI,CAAC;MACnB,IACE9B,YAAY,CAACS,GAAG,KAAKqB,IAAI,CAACN,MAAM,IAChCM,IAAI,CAACL,MAAM,KAAKxB,IAAI,CAACQ,GAAG,EACxB;QACAM,WAAW,CAAC,IAAI,CAAC;QACjB0D,UAAU,CAAC,MAAM1D,WAAW,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;MAC5C;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACf,YAAY,CAAC,CAAC;;EAElB;EACAf,SAAS,CAAC,MAAM;IACd,MAAMyF,YAAY,GAAGC,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC;IAC9D,IAAIF,YAAY,EAAEA,YAAY,CAACG,SAAS,GAAGH,YAAY,CAACI,YAAY;EACtE,CAAC,EAAE,CAAClE,WAAW,EAAEE,QAAQ,CAAC,CAAC;EAE3B,oBACErB,OAAA,CAAAE,SAAA;IAAAoF,QAAA,EACG/E,YAAY,iBACXP,OAAA;MAAKuF,SAAS,EAAC,eAAe;MAAAD,QAAA,gBAC5BtF,OAAA;QAAKuF,SAAS,EAAC,sBAAsB;QAAAD,QAAA,EAClC7B,UAAU,CAAC7C,YAAY;MAAC;QAAA4E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC,eAEN3F,OAAA;QAAKuF,SAAS,EAAC,gBAAgB;QAACK,EAAE,EAAC,gBAAgB;QAAAN,QAAA,GAChDnE,WAAW,CAACoB,GAAG,CAAC,CAACuC,GAAG,EAAEe,GAAG,KAAK;UAC7B,MAAMC,mBAAmB,GAAGhB,GAAG,CAAC9C,MAAM,KAAKxB,IAAI,CAACQ,GAAG;UAEnD,oBACEhB,OAAA;YAEEuF,SAAS,EAAC,mBAAmB;YAC7BQ,KAAK,EAAE;cACLC,cAAc,EAAEF,mBAAmB,GAAG,KAAK,GAAG;YAChD,CAAE;YAAAR,QAAA,eAEFtF,OAAA;cAAAsF,QAAA,gBACEtF,OAAA;gBACEuF,SAAS,EACPO,mBAAmB,GACf,cAAc,GACd,kBACL;gBAAAR,QAAA,GAEAR,GAAG,CAAC7C,IAAI,iBAAIjC,OAAA;kBAAAsF,QAAA,EAAMR,GAAG,CAAC7C;gBAAI;kBAAAuD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,EACjCb,GAAG,CAAClD,KAAK,iBACR5B,OAAA;kBACEiG,GAAG,EAAEnB,GAAG,CAAClD,KAAM;kBACfsE,GAAG,EAAC,YAAY;kBAChBC,MAAM,EAAC,KAAK;kBACZC,KAAK,EAAC,KAAK;kBACXL,KAAK,EAAE;oBAAEM,YAAY,EAAE,KAAK;oBAAEC,SAAS,EAAE;kBAAM;gBAAE;kBAAAd,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAClD,CACF;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CAAC,eAEN3F,OAAA;gBACEuF,SAAS,EAAC,mBAAmB;gBAC7BQ,KAAK,EAAE;kBACLQ,KAAK,EAAET,mBAAmB,GAAG,OAAO,GAAG;gBACzC,CAAE;gBAAAR,QAAA,GAEDpB,UAAU,CAACY,GAAG,CAAC0B,SAAS,CAAC,EAAE,GAAG,EAC9BV,mBAAmB,IAAIhB,GAAG,CAACC,IAAI,iBAC9B/E,OAAA;kBACEuF,SAAS,EAAC,oBAAoB;kBAC9B,eAAY,MAAM;kBAClBQ,KAAK,EAAE;oBAAEU,KAAK,EAAE;kBAAU;gBAAE;kBAAAjB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC1B,CACL;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH;UAAC,GAzCDE,GAAG;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA0CL,CAAC;QAEV,CAAC,CAAC,EAEDtE,QAAQ,KACPd,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEM,OAAO,CAClB0B,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACxB,GAAG,CAAC,CACjB0F,QAAQ,CAACjF,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEO,MAAM,CAAC,kBAC7BhC,OAAA;UAAKuF,SAAS,EAAC,kBAAkB;UAAAD,QAAA,eAC/BtF,OAAA;YAAAsF,QAAA,EAAG;UAAS;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,EAELpE,eAAe,iBACdvB,OAAA;QACE+F,KAAK,EAAE;UACLK,KAAK,EAAE,MAAM;UACbO,OAAO,EAAE,MAAM;UACfC,OAAO,EAAE,UAAU;UACnBZ,cAAc,EAAE;QAClB,CAAE;QAAAV,QAAA,eAEFtF,OAAA,CAACF,WAAW;UACViG,KAAK,EAAE;YAAEK,KAAK,EAAE,OAAO;YAAED,MAAM,EAAE;UAAQ,CAAE;UAC3CU,YAAY,EAAGjE,CAAC,IAAK1B,UAAU,CAACD,OAAO,GAAG2B,CAAC,CAACkE,KAAK;QAAE;UAAAtB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CACN,eAED3F,OAAA;QAAKuF,SAAS,EAAC,kBAAkB;QAAAD,QAAA,gBAC/BtF,OAAA;UACE+G,IAAI,EAAC,MAAM;UACXxB,SAAS,EAAC,oBAAoB;UAC9ByB,WAAW,EAAC,gBAAgB;UAC5BC,KAAK,EAAEhG,OAAQ;UACfiG,QAAQ,EAAGtE,CAAC,IAAK;YACf1B,UAAU,CAAC0B,CAAC,CAACE,MAAM,CAACmE,KAAK,CAAC;YAC1B7G,MAAM,CAACkC,IAAI,CAAC,aAAa,EAAE;cACzBP,MAAM,EAAExB,YAAY,CAACS,GAAG;cACxBH,OAAO,EAAEN,YAAY,CAACM,OAAO,CAAC0B,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACxB,GAAG,CAAC;cAC/CgB,MAAM,EAAExB,IAAI,CAACQ;YACf,CAAC,CAAC;UACJ;QAAE;UAAAwE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAEF3F,OAAA;UAAOmH,OAAO,EAAC,MAAM;UAAA7B,QAAA,gBACnBtF,OAAA;YAAGuF,SAAS,EAAC;UAAgC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClD3F,OAAA;YACE+G,IAAI,EAAC,MAAM;YACXnB,EAAE,EAAC,MAAM;YACTG,KAAK,EAAE;cAAEY,OAAO,EAAE;YAAO,CAAE;YAC3BS,MAAM,EAAC,0CAA0C;YACjDF,QAAQ,EAAEvE;UAAU;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC,eAER3F,OAAA;UACEuF,SAAS,EAAC,8BAA8B;UACxC,eAAY,MAAM;UAClB8B,OAAO,EAAEA,CAAA,KAAM7F,kBAAkB,CAAC,CAACD,eAAe;QAAE;UAAAiE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC,eAEV3F,OAAA;UACEuF,SAAS,EAAC,oCAAoC;UAC9C,eAAY,MAAM;UAClB8B,OAAO,EAAEA,CAAA,KAAM1F,WAAW,CAAC,EAAE;QAAE;UAAA6D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EACN,gBACD,CAAC;AAEP;AAACtF,EAAA,CArTQF,QAAQ;EAAA,QACElB,WAAW,EACaC,WAAW;AAAA;AAAAoI,EAAA,GAF7CnH,QAAQ;AAuTjB,eAAeA,QAAQ;AAAC,IAAAmH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}